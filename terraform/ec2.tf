resource "aws_instance" "instance" {
  ami                         = data.aws_ami.latest_amazon_linux.id
  instance_type               = "t2.micro"
  key_name                    = aws_key_pair.key_pair.id
  associate_public_ip_address = true
  subnet_id                   = module.vpc.public_subnets[0] # sort(data.aws_subnet_ids.subnets.ids)[0]
  security_groups             = [aws_security_group.instance.id]
  # WARN : it must target the aws_iam_instance_profile name (and not the aws_iam_role name)
  iam_instance_profile = aws_iam_instance_profile.ec2_profile.name

  # https://www.terraform.io/language/functions/templatefile
  user_data = templatefile("${path.module}/tpl/userdata.tpl", {})

  tags = {
    Name = var.project_name
  }

  lifecycle {
    ignore_changes = [
      ami, disable_api_termination, ebs_optimized,
      hibernation, security_groups, credit_specification,
      network_interface, ephemeral_block_device
    ]
  }
}

# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group
# create a security group for ec2 instances in the current project VPC
resource "aws_security_group" "instance" {
  name   = "${var.project_name}-instance-sg"
  vpc_id = module.vpc.vpc_id

  ingress {
    protocol  = "tcp"
    from_port = 22
    to_port   = 22
    # https://stackoverflow.com/a/53782560
    # https://stackoverflow.com/a/68833352
    cidr_blocks = ["${data.http.my_ip.body}/32"]
  }

  egress {
    protocol    = -1
    from_port   = 0
    to_port     = 0
    cidr_blocks = ["0.0.0.0/0"]
  }
}

data "aws_iam_policy_document" "ec2_assume_role" {
  statement {
    actions = ["sts:AssumeRole"]
    principals {
      type        = "Service"
      identifiers = ["ec2.amazonaws.com"]
    }
  }
}

resource "aws_iam_role" "ec2_role" {
  name               = "${var.project_name}-ec2-role"
  path               = "/"
  assume_role_policy = data.aws_iam_policy_document.ec2_assume_role.json
}

# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_instance_profile
resource "aws_iam_instance_profile" "ec2_profile" {
  name = "${var.project_name}-ec2-profile"
  role = aws_iam_role.ec2_role.name
}

# https://registry.terraform.io/providers/hashicorp/tls/latest/docs/resources/private_key
resource "tls_private_key" "private_key" {
  #
  # /!\ IMPORTANT SECURITY ISSUE /!\
  # The private key generated by this resource will be stored unencrypted in your Terraform state file. 
  # Use of this resource for production deployments is not recommended. Instead, generate a private key
  # file outside of Terraform and distribute it securely to the system where Terraform will be run.
  #
  algorithm = "RSA"
  rsa_bits  = 4096
}

# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/key_pair
resource "aws_key_pair" "key_pair" {
  key_name   = var.project_name
  public_key = tls_private_key.private_key.public_key_openssh

  tags = {
    Name = var.project_name
  }
}

# https://registry.terraform.io/providers/hashicorp/local/latest/docs/resources/file
resource "local_file" "rsa_key_file" {
  content         = tls_private_key.private_key.private_key_pem
  filename        = "${path.module}/${var.project_name}.pem"
  file_permission = "0400"
}